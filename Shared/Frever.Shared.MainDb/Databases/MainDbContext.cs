// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using System.Threading.Tasks;
using Common.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Frever.Shared.MainDb.Entities;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using Microsoft.EntityFrameworkCore.Metadata;

#pragma warning disable CS0618

namespace Frever.Shared.MainDb
{
    public abstract partial class MainDbContext : DbContext
    {
        private readonly ILoggerFactory _loggerFactory;

        public MainDbContext(ILoggerFactory loggerFactory)
        {
            _loggerFactory = loggerFactory;
        }

        public MainDbContext(DbContextOptions options, ILoggerFactory loggerFactory) : base(options)
        {
            _loggerFactory = loggerFactory;
        }

        protected MainDbContext(DbContextOptions options, ILoggerFactory loggerFactory, bool stub) : base(options)
        {
            _loggerFactory = loggerFactory;
        }

        public virtual DbSet<AiLlmPrompt> AiLlmPrompt { get; set; }
        public virtual DbSet<AiOpenAiKey> AiOpenAiKey { get; set; }
        public virtual DbSet<AiOpenAiAgent> AiOpenAiAgent { get; set; }
        public virtual DbSet<AiArtStyle> AiArtStyle { get; set; }
        public virtual DbSet<AiCharacter> AiCharacter { get; set; }
        public virtual DbSet<AiCharacterImage> AiCharacterImage { get; set; }
        public virtual DbSet<AiMakeUp> AiMakeUp { get; set; }
        public virtual DbSet<AiMakeUpCategory> AiMakeUpCategory { get; set; }
        public virtual DbSet<AiGeneratedImage> AiGeneratedImage { get; set; }
        public virtual DbSet<AiGeneratedImagePerson> AiGeneratedImagePerson { get; set; }
        public virtual DbSet<AiGeneratedImageSource> AiGeneratedImageSource { get; set; }
        public virtual DbSet<AiGeneratedVideo> AiGeneratedVideo { get; set; }
        public virtual DbSet<AiGeneratedVideoClip> AiGeneratedVideoClip { get; set; }
        public virtual DbSet<AiGeneratedContent> AiGeneratedContent { get; set; }
        public virtual DbSet<AiWorkflowMetadata> AiWorkflowMetadata { get; set; }
        public virtual DbSet<AiLanguageMode> AiLanguageMode { get; set; }
        public virtual DbSet<AiSpeakerMode> AiSpeakerMode { get; set; }
        public virtual DbSet<Album> Album { get; set; }
        public virtual DbSet<AppleSignInEmail> AppleSignInEmail { get; set; }
        public virtual DbSet<Artist> Artist { get; set; }
        public virtual DbSet<AssetStoreTransaction> AssetStoreTransactions { get; set; }
        public virtual DbSet<AssetStoreTransactionAsset> AssetStoreTransactionAssets { get; set; }
        public virtual DbSet<BlockedUser> BlockedUser { get; set; }
        public virtual DbSet<Brand> Brand { get; set; }
        public virtual DbSet<BrandAndGenre> BrandAndGenre { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<ContentRow> ContentRow { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<DeviceBlacklist> DeviceBlacklist { get; set; }
        public virtual DbSet<ExternalPlaylist> ExternalPlaylists { get; set; }
        public virtual DbSet<ExternalSong> ExternalSongs { get; set; }
        public virtual DbSet<FavoriteSound> FavoriteSound { get; set; }
        public virtual DbSet<Follower> Follower { get; set; }
        public virtual DbSet<FollowerHistory> FollowerHistory { get; set; }
        public virtual DbSet<FollowerStats> FollowerStats { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Genre> Genre { get; set; }
        public virtual DbSet<GeoCluster> GeoCluster { get; set; }
        public virtual DbSet<GeoReference> GeoReference { get; set; }
        public virtual DbSet<Group> Group { get; set; }
        public virtual DbSet<GroupBioLink> GroupBioLink { get; set; }
        public virtual DbSet<GroupWithAge> GroupWithAge { get; set; }
        public virtual DbSet<HardCurrencyExchangeOffer> HardCurrencyExchangeOffer { get; set; }

        public virtual DbSet<InAppPurchaseOrder> InAppPurchaseOrder { get; set; }
        public virtual DbSet<InAppProduct> InAppProduct { get; set; }
        public virtual DbSet<InAppUserSubscription> InAppUserSubscription { get; set; }
        public virtual DbSet<InAppProductDetails> InAppProductDetails { get; set; }
        public virtual DbSet<InAppProductPriceTier> InAppProductPriceTier { get; set; }
        public virtual DbSet<Label> Label { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<Localization> Localization { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<NotificationAndGroup> NotificationAndGroup { get; set; }
        public virtual DbSet<Readiness> Readiness { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleAccessScope> RoleAccessScope { get; set; }
        public virtual DbSet<PromotedSong> PromotedSong { get; set; }
        public virtual DbSet<Song> Song { get; set; }
        public virtual DbSet<StorageFile> StorageFile { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserAndGroup> UserAndGroup { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<UserSound> UserSound { get; set; }
        public virtual DbSet<Vertical> Vertical { get; set; }
        public virtual DbSet<VerticalCategory> VerticalCategory { get; set; }
        public virtual DbSet<UserActivity> UserActivities { get; set; }
        public virtual DbSet<UserActionSetting> UserActionSettings { get; set; }

        // Video
        public virtual DbSet<Comment> Comments { get; set; }

        public virtual DbSet<CommentLike> CommentLikes { get; set; }
        public virtual DbSet<CommentGroupInfo> CommentGroupInfos { get; set; }
        public virtual DbSet<Hashtag> Hashtag { get; set; }
        public virtual DbSet<Like> Like { get; set; }
        public virtual DbSet<Platform> Platform { get; set; }
        public virtual DbSet<Remix> Remixes { get; set; }
        public virtual DbSet<Reposts> Reposts { get; set; }
        public virtual DbSet<Video> Video { get; set; }
        public virtual DbSet<VideoKpi> VideoKpi { get; set; }
        public virtual DbSet<VideoAndHashtag> VideoAndHashtag { get; set; }
        public virtual DbSet<VideoGroupTag> VideoGroupTag { get; set; }

        public virtual DbSet<VideoReportReason> VideoReportReason { get; set; }
        public virtual DbSet<VideoReport> VideoReport { get; set; }

        public virtual DbSet<VideoMention> VideoMention { get; set; }
        public virtual DbSet<VideoView> VideoView { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            var jsonSerializerSettings = new JsonSerializerSettings
                           {
                               NullValueHandling = NullValueHandling.Ignore,
                               ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                               ContractResolver = new CamelCasePropertyNamesContractResolver()
                           };
            jsonSerializerSettings.Converters.Add(new StringEnumConverter());

            modelBuilder.HasPostgresEnum<AssetStoreAssetType>()
                        .HasPostgresEnum<AssetStoreTransactionType>()
                        .HasPostgresEnum<FollowerState>()
                        .HasPostgresEnum<NotificationType>()
                        .HasPostgresEnum<CharacterAccess>()
                        .HasPostgresExtension("btree_gist")
                        .HasPostgresExtension("intarray")
                        .HasPostgresExtension("uuid-ossp")
                        .HasAnnotation("Relational:Collation", "en_US.UTF-8");

            modelBuilder.Entity<AiArtStyle>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiCharacterImage>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiMakeUp>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiLanguageMode>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiSpeakerMode>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiGeneratedContent>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.GenerationParameters).HasJsonConversion(jsonSerializerSettings);
            });

            modelBuilder.Entity<AiGeneratedImage>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
                entity.Property(e => e.ModerationResult).HasJsonConversion(jsonSerializerSettings);
            });

            modelBuilder.Entity<AiGeneratedImagePerson>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiGeneratedImageSource>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<AiGeneratedVideo>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
                entity.Property(e => e.ModerationResult).HasJsonConversion(jsonSerializerSettings);
            });

            modelBuilder.Entity<AiGeneratedVideoClip>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
                entity.Property(e => e.ModerationResult).HasJsonConversion(jsonSerializerSettings);
            });

            modelBuilder.Entity<Album>(entity =>
            {
                entity.HasIndex(e => new { e.Name, e.ArtistId })
                     .HasName("Album_Name_ArtistId_key")
                     .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.Artist)
                     .WithMany(p => p.Album)
                     .HasForeignKey(d => d.ArtistId)
                     .HasConstraintName("Album_ArtistId_fkey");
            });

            modelBuilder.Entity<AppleSignInEmail>(entity =>
            {
                entity.HasKey(e => e.AppleId);
            });

            modelBuilder.Entity<Artist>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Artist_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<BlockedUser>(entity =>
            {
                entity.HasKey(e => new { e.BlockedUserId, e.BlockedByUserId })
                    .HasName("pk_BlockedUser");

                entity.HasOne(d => d.UserBlocked)
                    .WithMany(p => p.BlockedUsers)
                    .HasForeignKey(d => d.BlockedUserId)
                    .HasConstraintName("BlockedUser_BlockedUserId_fkey");

                entity.HasOne(d => d.BlockedByUser)
                    .WithMany(p => p.BlockedByUsers)
                    .HasForeignKey(d => d.BlockedByUserId)
                    .HasConstraintName("BlockedUser_BlockedByUserId_fkey");
            });

            modelBuilder.Entity<Brand>(entity =>
            {
                entity.HasIndex(e => e.GroupId)
                    .HasName("idx_Brand_GroupId");

                entity.HasIndex(e => e.Name)
                    .HasName("Brand_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Brand)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Brand_GroupId_fkey");
            });

            modelBuilder.Entity<BrandAndGenre>(entity =>
            {
                entity.HasKey(e => new { e.BrandId, e.GenreId })
                    .HasName("pk_BrandAndGenre");

                entity.HasIndex(e => e.GenreId)
                    .HasName("idx_BrandAndGenre_Genre");

                entity.HasOne(d => d.Brand)
                    .WithMany(p => p.BrandAndGenre)
                    .HasForeignKey(d => d.BrandId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BrandAndGenre_BrandId_fkey");

                entity.HasOne(d => d.Genre)
                    .WithMany(p => p.BrandAndGenre)
                    .HasForeignKey(d => d.GenreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("BrandAndGenre_GenreId_fkey");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasIndex(e => e.ISOName)
                    .HasName("Country_ISOName_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.DisplayName).IsRequired();

                entity.Property(e => e.ISOName)
                    .IsRequired()
                    .HasColumnName("ISOName");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasIndex(e => e.Isoname)
                    .HasName("Currency_ISOName_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.DisplayName).IsRequired();

                entity.Property(e => e.Isoname)
                    .IsRequired()
                    .HasColumnName("ISOName");

                entity.Property(e => e.Symbol).IsRequired();
            });

            modelBuilder.Entity<DeviceBlacklist>(entity =>
            {
                entity.HasKey(e => e.DeviceId);

                entity.Property(e => e.BlockedAt)
                      .HasColumnType("timestamp with time zone")
                      .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<Follower>(entity =>
            {
                entity.HasKey(e => new { e.FollowerId, e.FollowingId })
                    .HasName("pk_Follower");

                entity.HasIndex(e => e.FollowingId)
                    .HasName("idx_Follower_FollowingId");

                entity.HasOne(d => d.FollowerNavigation)
                    .WithMany(p => p.FollowerFollowerNavigation)
                    .HasForeignKey(d => d.FollowerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Follower_FollowerId_fkey");

                entity.HasOne(d => d.Following)
                    .WithMany(p => p.FollowerFollowing)
                    .HasForeignKey(d => d.FollowingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Follower_FollowingId_fkey");
            });

            modelBuilder.Entity<FollowerHistory>(entity =>
            {
                entity.HasIndex(e => new { e.FollowingId, e.FollowerId, e.TimePeriod })
                    .HasName("FollowerHistory_range_no_overlap")
                    .HasMethod("gist");

                entity.Property(e => e.FollowerHistoryId).UseIdentityAlwaysColumn();

                entity.Property(e => e.TimePeriod).HasColumnType("tstzrange");

                entity.HasOne(d => d.Follower)
                    .WithMany(p => p.FollowerHistoryFollower)
                    .HasForeignKey(d => d.FollowerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FollowerHistory_FollowerId_fkey");

                entity.HasOne(d => d.Following)
                    .WithMany(p => p.FollowerHistoryFollowing)
                    .HasForeignKey(d => d.FollowingId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FollowerHistory_FollowingId_fkey");
            });

            modelBuilder.Entity<FollowerStats>(e =>
            {
                e.HasKey(a => a.GroupId);
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Gender_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Genre>(entity =>
            {
                entity.HasIndex(e => new { e.Name, e.LabelId } )
                    .HasName("Genre_Name_uniq")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.Label)
                    .WithMany(p => p.Genre)
                    .HasForeignKey(d => d.LabelId)
                    .HasConstraintName("Group_LabelId_fkey");

            });

            modelBuilder.Entity<GeoReference>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("GeoReference_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.BirthDate).HasColumnType("date");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.NickName);

                entity.Property(e => e.AppsFlyerIds).HasJsonConversion();

                entity.HasOne(d => d.GenderNavigation)
                      .WithMany(p => p.Group)
                      .HasForeignKey(d => d.Gender)
                      .HasConstraintName("Group_Gender_fkey");

                entity.HasOne(d => d.TaxationCountry)
                    .WithMany(p => p.Group)
                    .HasForeignKey(d => d.TaxationCountryId)
                    .HasConstraintName("Group_TaxationCountryId_fkey");

                entity.HasOne(d => d.DefaultLanguage)
                      .WithMany(p => p.Groups)
                      .HasForeignKey(d => d.DefaultLanguageId)
                      .HasConstraintName("Group_DefaultLanguageId_fkey");

                entity.Property(e => e.Files).HasColumnType("json");

                entity.Property(e => e.ParentalConsent).HasJsonConversion(jsonSerializerSettings);
            });

            modelBuilder.Entity<GroupWithAge>(opts => opts.HasNoKey());

            modelBuilder.Entity<Label>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Label_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Language_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Localization>(entity =>
            {
                entity.HasKey(e => e.Key);
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Expires).HasColumnType("timestamp with time zone");

                entity.Property(e => e.TimeStamp)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<NotificationAndGroup>(entity =>
            {
                entity.HasKey(e => new { e.GroupId, e.NotificationId })
                    .HasName("pk_NotificationAndGroup");

                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.NotificationAndGroup)
                    .HasForeignKey(d => d.NotificationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("NotificationAndGroup_NotificationId_fkey");
            });

            modelBuilder.Entity<Readiness>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("ReadinessLevel_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id);

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<RoleAccessScope>(entity =>
            {
                entity.HasKey(e => new {e.RoleId, e.AccessScope});
            });

            modelBuilder.Entity<PromotedSong>(entity =>
            {
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<Song>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.HasIndex(e => e.ArtistId)
                    .HasName("idx_Song_Artist");

                entity.HasIndex(e => e.GenreId)
                    .HasName("idx_Song_Genre");

                entity.HasIndex(e => e.GroupId)
                    .HasName("idx_Song_Group");

                entity.HasIndex(e => e.LabelId)
                    .HasName("idx_Song_Label");

                entity.HasIndex(e => e.Name)
                    .HasName("Song_Name_key")
                    .IsUnique();

                entity.HasIndex(e => e.Tags)
                    .HasName("idx_Song_Tags");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.ModifiedTime)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Tags)
                    .IsRequired()
                    .HasDefaultValueSql("ARRAY[]::integer[]");

                entity.Property(e => e.UploaderUserId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Album)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.AlbumId)
                    .HasConstraintName("Song_AlbumId_fkey");

                entity.HasOne(d => d.Artist)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.ArtistId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_ArtistId_fkey");

                entity.HasOne(d => d.Genre)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.GenreId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_GenreId_fkey");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_GroupId_fkey");

                entity.HasOne(d => d.Mood)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.MoodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_MoodId_fkey");

                entity.HasOne(d => d.Label)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.LabelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_LabelId_fkey");

                entity.HasOne(d => d.Readiness)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.ReadinessId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_ReadinessId_fkey");

                entity.HasOne(d => d.UploaderUser)
                    .WithMany(p => p.Song)
                    .HasForeignKey(d => d.UploaderUserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Song_UploaderUserId_fkey");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasIndex(e => e.Email).IsUnique();

                entity.HasIndex(e => e.PhoneNumber).IsUnique();

                entity.HasIndex(e => e.IdentityServerId).IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.MainGroup)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.MainGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<UserAndGroup>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.GroupId })
                    .HasName("pk_UserAndGroup");

                entity.HasIndex(e => e.GroupId)
                    .HasName("idx_UserAndGroup_Group");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.UserAndGroup)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UserAndGroup_GroupId_fkey");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserAndGroup)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("UserAndGroup_UserId_fkey");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new {e.GroupId, e.RoleId});
            });

            modelBuilder.Entity<UserSound>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CopyrightCheckResults).HasColumnType("json");

                entity.Property(e => e.Files).HasColumnType("json");

                entity.Property(e => e.CreatedTime)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.UserSound)
                    .HasForeignKey(d => d.GroupId)
                    .HasConstraintName("UserSound_GroupId_fkey");
            });

            modelBuilder.Entity<Vertical>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Vertical_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<VerticalCategory>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("VerticalCategory_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.Vertical)
                    .WithMany(p => p.VerticalCategory)
                    .HasForeignKey(d => d.VerticalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VerticalCategory_VerticalId_fkey");
            });

            modelBuilder.Entity<AssetStoreTransaction>(entity =>
            {
                entity.ToTable("AssetStoreTransaction");

                entity.HasIndex(e => e.GroupId, "AssetStoreTransaction_Group_Idx");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                // entity.Property(e => e.CreatedTime)
                //     .HasColumnType("timestamp with time zone")
                //     .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.AssetOffer)
                    .WithMany(p => p.AssetStoreTransactions)
                    .HasForeignKey(d => d.AssetOfferId)
                    .HasConstraintName("AssetStoreTransaction_AssetOfferId_fkey");

                entity.HasOne(d => d.InAppProduct)
                    .WithMany(p => p.AssetStoreTransactions)
                    .HasForeignKey(d => d.InAppProductId)
                    .HasConstraintName("AssetStoreTransaction_InAppProductId_fkey");
            });

            modelBuilder.Entity<AssetStoreTransactionAsset>(entity =>
            {
                entity.ToTable("AssetStoreTransactionAsset");
                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.HasOne(d => d.AssetStoreTransaction)
                    .WithMany(p => p.AssetStoreTransactionAssets)
                    .HasForeignKey(d => d.AssetStoreTransactionId)
                    .HasConstraintName("AssetStoreTransaction_AssetStoreTransactionAsset_fkey");

            });

            modelBuilder.Entity<InAppProduct>(entity =>
            {
                entity.ToTable("InAppProduct");

                entity.HasKey(e => e.Id);

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.AppStoreProductRef).IsRequired();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("true");

                entity.Property(e => e.Files).HasColumnType("json");
                entity.Property(e => e.UsageEstimation).HasJsonConversion();

                entity.Property(e => e.Title).IsRequired();
            });

            modelBuilder.Entity<InAppProductDetails>(entity =>
            {
                entity.ToTable("InAppProductDetails");

                entity.HasKey(e => e.Id);

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();
                entity.Property(e => e.Files).HasColumnType("json");
            });

            modelBuilder.Entity<UserActivity>(entity =>
            {
                entity.ToTable("UserActivity");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.OccurredAt)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");
            });

            modelBuilder.Entity<UserActionSetting>(entity =>
            {
                entity.HasKey(e => e.UserAction);

                entity.Property(e => e.Settings)
                    .IsRequired()
                    .HasColumnType("json");
            });

            modelBuilder.Entity<ExternalSong>(
                entity =>
                {
                    entity.ToTable("ExternalSong");
                    entity.HasKey(e => e.Id);

                    entity.Property(b => b.Id).HasColumnName("ExternalTrackId").ValueGeneratedNever();
                }
            );

            modelBuilder.Entity<ExternalPlaylist>(
                entity =>
                {
                    entity.ToTable("ExternalPlaylist");
                    entity.HasKey(e => e.Id);

                    entity.HasOne(d => d.Readiness)
                          .WithMany(p => p.ExternalPlaylists)
                          .HasForeignKey(d => d.ReadinessId);
                }
            );

            // Video
            modelBuilder.HasPostgresEnum<VideoAccess>();

            modelBuilder.Entity<Hashtag>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Hashtag_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Platform>(entity =>
            {
                entity.HasIndex(e => e.Name)
                    .HasName("Platform_Name_key")
                    .IsUnique();

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Reposts>(entity =>
            {
                entity.HasKey(e => new { e.VideoId, e.GroupId })
                    .HasName("pk_Reposts");

                entity.HasIndex(e => e.GroupId)
                    .HasName("idx_Reposts_GroupId");

                entity.Property(e => e.Time)
                    .HasColumnType("timestamp with time zone")
                    .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.Video)
                    .WithMany(p => p.Reposts)
                    .HasForeignKey(d => d.VideoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Reposts_VideoId_fkey");
            });

            modelBuilder.Entity<Remix>(
                entity =>
                {
                    entity.ToTable("Remixes");

                    entity.HasKey(e => e.VideoId)
                        .HasName("pk_Remixes");

                    entity.Property(e => e.Time)
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP")
                        .ValueGeneratedOnAdd();
                }
            );


            modelBuilder.Entity<Video>(entity =>
            {
                entity.HasIndex(e => e.LevelId)
                      .HasName("idx_Video_LevelId");

                entity.Property(e => e.Id).UseIdentityAlwaysColumn();

                entity.Property(e => e.CharactersCount).HasDefaultValueSql("1");

                entity.Property(e => e.Links).HasJsonConversion();
                entity.Property(e => e.SongInfo).HasJsonConversion();
                entity.Property(e => e.UserSoundInfo).HasJsonConversion();

                entity.Property(e => e.Location).HasColumnType("geography(point)");

                entity.Property(e => e.CreatedTime)
                      .HasColumnType("timestamp with time zone")
                      .HasDefaultValueSql("CURRENT_TIMESTAMP");

                entity.HasOne(d => d.Group)
                      .WithMany(p => p.Video)
                      .HasForeignKey(d => d.GroupId)
                      .OnDelete(DeleteBehavior.Cascade)
                      .HasConstraintName("Video_GroupId_fkey");

                entity.HasOne(d => d.Platform)
                      .WithMany(p => p.Video)
                      .HasForeignKey(d => d.PlatformId)
                      .OnDelete(DeleteBehavior.ClientSetNull)
                      .HasConstraintName("Video_PlatformId_fkey");

                entity.HasOne(d => d.VerticalCategory)
                      .WithMany(p => p.Video)
                      .HasForeignKey(d => d.VerticalCategoryId)
                      .OnDelete(DeleteBehavior.ClientSetNull)
                      .HasConstraintName("Video_VerticalCategoryId_fkey");
            });

            modelBuilder.Entity<VideoAndHashtag>(entity =>
            {
                entity.HasKey(e => new { e.VideoId, e.HashtagId })
                    .HasName("pk_VideoAndHashtag");

                entity.HasOne(d => d.Hashtag)
                    .WithMany(p => p.VideoAndHashtag)
                    .HasForeignKey(d => d.HashtagId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VideoAndHashtag_HashtagId_fkey");

                entity.HasOne(d => d.Video)
                    .WithMany(p => p.VideoAndHashtag)
                    .HasForeignKey(d => d.VideoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("VideoAndHashtag_VideoId_fkey");
            });

            modelBuilder.Entity<VideoGroupTag>(entity =>
            {
                entity.HasKey(e => new { e.VideoId, e.GroupId })
                    .HasName("pk_VideoAndGroup");
            });

            modelBuilder.Entity<VideoReport>(entity =>
            {
                entity.ToTable("VideoReport");
                entity.HasKey(e => e.Id);
                entity.Property(e => e.Id).ValueGeneratedOnAdd();
                entity.Property(e => e.CreatedTime).ValueGeneratedOnAdd();
                entity.Property(e => e.ModerationNotes).IsRequired(false);
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.ToTable("Comments");
                entity.HasKey(e => e.Id);

                entity.Property(e => e.Mentions)
                    .HasJsonConversion();
            });

            modelBuilder.Entity<CommentLike>(e =>
            {
                e.ToTable("CommentLikes");
            });

            modelBuilder.Entity<CommentGroupInfo>(e =>
            {
                e.HasNoKey();
                e.Ignore(a => a.CreatorScoreBadge);
            });

            modelBuilder.Entity<VideoMention>(entity =>
            {
                entity.HasKey(e => new { e.VideoId, e.GroupId })
                    .HasName("pk_VideoMention");

                entity.HasOne(d => d.Video)
                    .WithMany(p => p.VideoMentions)
                    .HasForeignKey(d => d.VideoId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<VideoView>(
                entity =>
                {
                    entity.ToTable("Views");

                    entity.HasKey(nameof(Entities.VideoView.UserId), nameof(Entities.VideoView.VideoId), nameof(Entities.VideoView.Time));

                    entity.Property(e => e.UserId).IsRequired();
                    entity.Property(e => e.VideoId).IsRequired();
                    entity.Property(e => e.Time).IsRequired();
                }
            );

            modelBuilder.Entity<VideoKpi>(
                e =>
                {
                    e.HasKey(a => a.VideoId);
                }
            );

            modelBuilder.Entity<Like>(
                builder =>
                {
                    builder.ToTable("Likes");
                    builder.HasKey(nameof(Entities.Like.VideoId), nameof(Entities.Like.UserId));
                }
            );

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}