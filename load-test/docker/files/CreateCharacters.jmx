<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Create Characters" enabled="true">
      <stringProp name="TestPlan.comments">Logins with several accounts</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="auth-server" elementType="Argument">
            <stringProp name="Argument.name">auth-server</stringProp>
            <stringProp name="Argument.value">auth-content-stage.frever-api.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http.connectTimeout" elementType="Argument">
            <stringProp name="Argument.name">http.connectTimeout</stringProp>
            <stringProp name="Argument.value">30000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="http.responseTimeout" elementType="Argument">
            <stringProp name="Argument.name">http.responseTimeout</stringProp>
            <stringProp name="Argument.value">600000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="threads" elementType="Argument">
            <stringProp name="Argument.name">threads</stringProp>
            <stringProp name="Argument.value">${__P(threads,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="iterations" elementType="Argument">
            <stringProp name="Argument.name">iterations</stringProp>
            <stringProp name="Argument.value">${__P(iterations,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="${__machineIP()} Create Characters" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${iterations}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Logins CSV" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">Logins.csv</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">login,password</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] Login ${login}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${login}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">${password}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">Server</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">friends_factory.creators_api</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.value">g&apos;KpB#[_(&lt;KP;Et25]a__J*mh;?(=h%NPd(&apos;=Z9KpC2xQ.F-E5{Sd&gt;*AtK!t!t9-_Zq9-{.r</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${auth-server}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/connect/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
          <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Token" enabled="true">
            <stringProp name="VAR">token</stringProp>
            <stringProp name="JSONPATH">access_token</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Raw Main Server URL from JSON" enabled="true">
            <stringProp name="VAR">main-server-raw</stringProp>
            <stringProp name="JSONPATH">server_url</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Main Server URL" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">main-server</stringProp>
            <stringProp name="RegexExtractor.regex">https?\:\/\/(.*)\/</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">main-server-raw</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Raw Asset Server URL from JSON" enabled="true">
            <stringProp name="VAR">asset-server-raw</stringProp>
            <stringProp name="JSONPATH">asset_server</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Asset Server URL" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">asset-server</stringProp>
            <stringProp name="RegexExtractor.regex">https?\:\/\/(.*)\/</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">asset-server-raw</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Raw Video Server URL from JSON" enabled="true">
            <stringProp name="VAR">video-server-raw</stringProp>
            <stringProp name="JSONPATH">video_server</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Video Server URL" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">video-server</stringProp>
            <stringProp name="RegexExtractor.regex">https?\:\/\/(.*)\/</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">video-server-raw</stringProp>
          </RegexExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Raw Social Server URL from JSON" enabled="true">
            <stringProp name="VAR">social-server-raw</stringProp>
            <stringProp name="JSONPATH">social_server</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Social Server URL" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">social-server</stringProp>
            <stringProp name="RegexExtractor.regex">https?\:\/\/(.*)\/</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">variable</stringProp>
            <stringProp name="Scope.variable">social-server-raw</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[CC] Parse JWT Payload" enabled="true">
          <stringProp name="BeanShellSampler.query">import org.apache.commons.codec.binary.Base64;

//jwt_token is the variable declared in user defined variables
//generally we can get the corrlated value instead of jwt_token
String response = vars.get(&quot;token&quot;);
String[] arr=response.split(&quot;\\.&quot;);
String actualvalue=arr[1].replaceAll(&quot;-&quot;,&quot;+&quot;);
actualvalue=actualvalue.replaceAll(&quot;_&quot;,&quot;/&quot;);
byte[] decoded_response = Base64.decodeBase64(actualvalue);
// inserting decoded JWT token into B_IdToken
vars.put(&quot;B_IdToken&quot;,new String(decoded_response));
log.info(new String(decoded_response));</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract PrimaryGroupId" enabled="true">
            <stringProp name="VAR">primary-group-id</stringProp>
            <stringProp name="JSONPATH">PrimaryGroupId</stringProp>
            <stringProp name="DEFAULT"></stringProp>
            <stringProp name="VARIABLE">B_IdToken</stringProp>
            <stringProp name="SUBJECT">VAR</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Upload Thumb 128" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Get Upload URL" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Authorization Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] GET Upload URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${asset-server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/File/PreUploadingUrl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Url" enabled="true">
                <stringProp name="VAR">thumb128-uploadUrl</stringProp>
                <stringProp name="JSONPATH">uploadUrl</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract UploadID" enabled="true">
                <stringProp name="VAR">thumb128-uploadId</stringProp>
                <stringProp name="JSONPATH">uploadId</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] POST File data" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="CreateCharacter.Files/Thumb_128.png" elementType="HTTPFileArg">
                  <stringProp name="File.path">CreateCharacter.Files/Thumb_128.png</stringProp>
                  <stringProp name="File.paramname"></stringProp>
                  <stringProp name="File.mimetype"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${thumb128-uploadUrl}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Upload Thumb 256" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Get Upload URL" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Authorization Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] GET Upload URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${asset-server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/File/PreUploadingUrl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Url" enabled="true">
                <stringProp name="VAR">thumb256-uploadUrl</stringProp>
                <stringProp name="JSONPATH">uploadUrl</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract UploadID" enabled="true">
                <stringProp name="VAR">thumb256-uploadId</stringProp>
                <stringProp name="JSONPATH">uploadId</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] POST File data" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="CreateCharacter.Files/Thumb_256.png" elementType="HTTPFileArg">
                  <stringProp name="File.path">CreateCharacter.Files/Thumb_256.png</stringProp>
                  <stringProp name="File.paramname"></stringProp>
                  <stringProp name="File.mimetype"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${thumb256-uploadUrl}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Upload Thumb 512" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Get Upload URL" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Authorization Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] GET Upload URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${asset-server}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/File/PreUploadingUrl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
              <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract Url" enabled="true">
                <stringProp name="VAR">thumb512-uploadUrl</stringProp>
                <stringProp name="JSONPATH">uploadUrl</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract UploadID" enabled="true">
                <stringProp name="VAR">thumb512-uploadId</stringProp>
                <stringProp name="JSONPATH">uploadId</stringProp>
                <stringProp name="DEFAULT"></stringProp>
                <stringProp name="VARIABLE"></stringProp>
                <stringProp name="SUBJECT">BODY</stringProp>
                <stringProp name="INPUT_FORMAT">JSON</stringProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] POST File data" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="CreateCharacter.Files/Thumb_512.png" elementType="HTTPFileArg">
                  <stringProp name="File.path">CreateCharacter.Files/Thumb_512.png</stringProp>
                  <stringProp name="File.paramname"></stringProp>
                  <stringProp name="File.mimetype"></stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${thumb512-uploadUrl}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[CC] Create Character" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Authorization And Content-Type Headers" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[CC] POST Character" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: 0,&#xd;
  &quot;assetStoreInfoId&quot;: null,&#xd;
  &quot;genderId&quot;: 1,&#xd;
  &quot;characterStyleId&quot;: 1,&#xd;
  &quot;groupId&quot;: ${primary-group-id},&#xd;
  &quot;readinessId&quot;: 0,&#xd;
  &quot;publicForCreation&quot;: false,&#xd;
  &quot;publicForBackgroundDancing&quot;: false,&#xd;
  &quot;createdTime&quot;: &quot;2021-06-29T14:08:07.126094+02:00&quot;,&#xd;
  &quot;modifiedTime&quot;: &quot;2021-06-29T14:08:07.126114+02:00&quot;,&#xd;
  &quot;size&quot;: null,&#xd;
  &quot;polyCount&quot;: null,&#xd;
  &quot;uploaderUserId&quot;: 0,&#xd;
  &quot;isDeleted&quot;: false,&#xd;
  &quot;name&quot;: &quot;loadTest${__UUID()}&quot;,&#xd;
  &quot;defaultOutfitId&quot;: 2,&#xd;
  &quot;isDefault&quot;: false,&#xd;
  &quot;filesInfo&quot;: null,&#xd;
  &quot;sortOrder&quot;: 0,&#xd;
  &quot;assetStoreInfo&quot;: null,&#xd;
  &quot;characterStyle&quot;: null,&#xd;
  &quot;defaultOutfit&quot;: null,&#xd;
  &quot;gender&quot;: null,&#xd;
  &quot;group&quot;: null,&#xd;
  &quot;readiness&quot;: null,&#xd;
  &quot;uploaderUser&quot;: null,&#xd;
  &quot;accountTransactionAndCharacter&quot;: null,&#xd;
  &quot;bundleAndCharacter&quot;: null,&#xd;
  &quot;characterAndUmaRecipe&quot;: [&#xd;
    {&#xd;
      &quot;characterId&quot;: 0,&#xd;
      &quot;umaRecipeId&quot;: 0,&#xd;
      &quot;character&quot;: null,&#xd;
      &quot;umaRecipe&quot;: {&#xd;
        &quot;id&quot;: 0,&#xd;
        &quot;globalId&quot;: &quot;00000000-0000-0000-0000-000000000000&quot;,&#xd;
        &quot;j&quot;: &quot;eyJwYWNrZWRSZWNpcGVUeXBlIjoiRHluYW1pY0NoYXJhY3RlckF2YXRhciIsIm5hbWUiOiJGcmV2ZXJVTUFEeW5hbWljQ2hhcmFjdGVyQXZhdGFyKENsb25lKSIsInJhY2UiOiJNYWxlIEJhc2UiLCJkbmEiOlt7ImRuYVR5cGUiOiJEeW5hbWljVU1BRG5hIiwiZG5hVHlwZUhhc2giOjE5OTg0NDAxNDIsInBhY2tlZERuYSI6IntcImJEbmFBc3NldFwiOntcImluc3RhbmNlSURcIjoxMzc5ODZ9LFwiYkRuYUFzc2V0TmFtZVwiOlwiQm9keU1hbGVEbmFBc3NldFwiLFwiYkRuYVNldHRpbmdzXCI6W3tcIm5hbWVcIjpcIndlaWdodFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm11c2NsZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImdsdXRlU2l6ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImhpcFNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJ0aGlnaFRoaWNrbmVzc1wiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImNhbGZUaGlja25lc3NcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJiZWxseVNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJuZWNrU2l6ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIndhaXN0U2l6ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcInRyYXBleml1c1NpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJzaG91bGRlclNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJhcm1UaGlja25lc3NcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJmb3JlYXJtVGhpY2tuZXNzXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwicmliY2FnZVNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJjaGVzdFNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJicmVhc3RTaXplXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiaGVpZ2h0XCIsXCJ2YWx1ZVwiOjEyOH1dfSJ9LHsiZG5hVHlwZSI6IkR5bmFtaWNVTUFEbmEiLCJkbmFUeXBlSGFzaCI6MTU4ODEwMTI5MywicGFja2VkRG5hIjoie1wiYkRuYUFzc2V0XCI6e1wiaW5zdGFuY2VJRFwiOjEzNzgxMH0sXCJiRG5hQXNzZXROYW1lXCI6XCJFeWVNYWxlRG5hQXNzZXRcIixcImJEbmFTZXR0aW5nc1wiOlt7XCJuYW1lXCI6XCJleWVTaXplXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllUG9zaXRpb25cIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJleWVXaWR0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVJvdGF0ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVNpemVXaWR0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZUxvd2VybGlkXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllVXBwZXJsaWRcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJtb25vbGlkXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiY3JlYXNlZGxpZFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImRvdWJsZWxpZFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVVwcGVybGlkSW5uZXJWZXJ0aWNhbFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVVwcGVybGlkSW5uZXJIb3Jpem9udGFsXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllVXBwZXJsaWRNaWRWZXJ0aWNhbFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVVwcGVybGlkTWlkSG9yaXpvbnRhbFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVVwcGVybGlkT3V0ZXJWZXJ0aWNhbFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZVVwcGVybGlkT3V0ZXJIb3Jpem9udGFsXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllTG93ZXJsaWRJbm5lclZlcnRpY2FsXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllTG93ZXJsaWRJbm5lckhvcml6b250YWxcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJleWVMb3dlcmxpZE1pZFZlcnRpY2FsXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllTG93ZXJsaWRNaWRIb3Jpem9udGFsXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllTG93ZXJsaWRPdXRlclZlcnRpY2FsXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllTG93ZXJsaWRPdXRlckhvcml6b250YWxcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJleWVJbm5lclwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZU91dGVyXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllU2l6ZUxlZnRcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJleWVTaXplUmlnaHRcIixcInZhbHVlXCI6MTI4fV19In0seyJkbmFUeXBlIjoiRHluYW1pY1VNQURuYSIsImRuYVR5cGVIYXNoIjo5NDc3ODQ4NDUsInBhY2tlZERuYSI6IntcImJEbmFBc3NldFwiOntcImluc3RhbmNlSURcIjoxMzc4Njh9LFwiYkRuYUFzc2V0TmFtZVwiOlwiRmFjZURuYUFzc2V0XCIsXCJiRG5hU2V0dGluZ3NcIjpbe1wibmFtZVwiOlwiY2hlZWtTaXplXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiY2hlZWtCb25lU2l6ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImVhclNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJjaGluTGVuZ3RoXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiY2hpbkhlaWd0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImNoaW5XaWR0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImphd0xlbmd0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImphd1NpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJqYXdXaWR0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImphd2xpbmVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJmYWNlV2lkdGhcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJmYWNlSGVpZ3RoXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiaGVhZFNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJlYXJQb3NpdGlvblwiLFwidmFsdWVcIjoxMjh9XX0ifSx7ImRuYVR5cGUiOiJEeW5hbWljVU1BRG5hIiwiZG5hVHlwZUhhc2giOjk2NTQ4ODc0NiwicGFja2VkRG5hIjoie1wiYkRuYUFzc2V0XCI6e1wiaW5zdGFuY2VJRFwiOjEzODE1Nn0sXCJiRG5hQXNzZXROYW1lXCI6XCJMaXBzRG5hQXNzZXRcIixcImJEbmFTZXR0aW5nc1wiOlt7XCJuYW1lXCI6XCJtb3V0aFNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJtb3V0aFVwcGVybGlwU2l6ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm1vdXRoTG93ZXJsaXBTaXplXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwibW91dGhDb3JuZXJzXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwibW91dGhQb3NpdGlvblwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm1vdXRoQ3VwaWRib3dcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJtb3V0aEN1cGlkYm93QWRqdXN0XCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwibW91dGhUZWFyZHJvcFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm1vdXRoVGVhcmRyb3BBZGp1c3RcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJtb3V0aENvcm5lcnNWZXJ0aWNhbFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm1vdXRoUG91dFwiLFwidmFsdWVcIjoxMjh9XX0ifSx7ImRuYVR5cGUiOiJEeW5hbWljVU1BRG5hIiwiZG5hVHlwZUhhc2giOjIxNDA5ODgzODQsInBhY2tlZERuYSI6IntcImJEbmFBc3NldFwiOntcImluc3RhbmNlSURcIjoxMzc5ODR9LFwiYkRuYUFzc2V0TmFtZVwiOlwiTm9zZURuYUFzc2V0XCIsXCJiRG5hU2V0dGluZ3NcIjpbe1wibmFtZVwiOlwibm9zZVNpemVcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJub3NlUG9zaXRpb25cIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJub3NlV2lkdGhcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJub3NlTGVuZ3RoXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwibm9zZVRpcExlbmd0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm5vc2VUaXBTaXplXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwibm9zZVdpbmdXaWR0aFwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcIm5vc2VXaW5nUG9zaXRpb25cIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJub3NlVGlwUm90YXRlXCIsXCJ2YWx1ZVwiOjEyOH1dfSJ9LHsiZG5hVHlwZSI6IkR5bmFtaWNVTUFEbmEiLCJkbmFUeXBlSGFzaCI6MTE0NzUxOTAwMCwicGFja2VkRG5hIjoie1wiYkRuYUFzc2V0XCI6e1wiaW5zdGFuY2VJRFwiOjEzNzkzNn0sXCJiRG5hQXNzZXROYW1lXCI6XCJFeWVicm93RG5hQXNzZXRcIixcImJEbmFTZXR0aW5nc1wiOlt7XCJuYW1lXCI6XCJleWVicm93U2l6ZVwiLFwidmFsdWVcIjoxMjh9LHtcIm5hbWVcIjpcImV5ZWJyb3dUaGlja25lc3NcIixcInZhbHVlXCI6MTI4fSx7XCJuYW1lXCI6XCJleWVicm93Um90YXRlXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllYnJvd1Bvc2l0aW9uXCIsXCJ2YWx1ZVwiOjEyOH0se1wibmFtZVwiOlwiZXllYnJvd1dpZHRoXCIsXCJ2YWx1ZVwiOjEyOH1dfSJ9LHsiZG5hVHlwZSI6IkR5bmFtaWNVTUFEbmEiLCJkbmFUeXBlSGFzaCI6Mjk2MDYxMTQzLCJwYWNrZWREbmEiOiJ7XCJiRG5hQXNzZXRcIjp7XCJpbnN0YW5jZUlEXCI6MTM3OTA2fSxcImJEbmFBc3NldE5hbWVcIjpcIkV5ZWxhc2hlc0ZlbWFsZURuYUFzc2V0XCIsXCJiRG5hU2V0dGluZ3NcIjpbe1wibmFtZVwiOlwiZXllbGFzaFNpemVcIixcInZhbHVlXCI6MTI4fV19In1dLCJjaGFyYWN0ZXJDb2xvcnMiOlt7Im5hbWUiOiJTa2luIiwiY29sb3JzIjpbMjU1LDIyOCwyMjUsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDBdfSx7Im5hbWUiOiJIYWlyIiwiY29sb3JzIjpbOTAsNTUsMzYsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDBdfSx7Im5hbWUiOiJFeWVzIiwiY29sb3JzIjpbMTAyLDE1MywxNzMsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDBdfSx7Im5hbWUiOiJFeWVicm93IiwiY29sb3JzIjpbNjksNDEsMzQsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDAsMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDBdfV0sIndhcmRyb2JlU2V0IjpbXSwicmFjZUFuaW1hdG9yQ29udHJvbGxlciI6IkxvY29tb3Rpb24ifQ==&quot;,&#xd;
        &quot;characterAndUmaRecipe&quot;: [],&#xd;
        &quot;characterControllerBackgroundDancer&quot;: null,&#xd;
        &quot;characterControllerUmaRecipe&quot;: null,&#xd;
        &quot;umaRecipeAndWardrobe&quot;: []&#xd;
      }&#xd;
    }&#xd;
  ],&#xd;
  &quot;characterController&quot;: null,&#xd;
  &quot;characterControllerBackgroundDancer&quot;: null,&#xd;
  &quot;characterGroupPermission&quot;: null,&#xd;
  &quot;characterTeamPermission&quot;: null,&#xd;
  &quot;deviceTypeAndCharacter&quot;: null,&#xd;
  &quot;groupAndCharacter&quot;: null,&#xd;
  &quot;priceruleAndCharacter&quot;: null,&#xd;
  &quot;qaComments&quot;: null,&#xd;
  &quot;seasonAndCharacter&quot;: null,&#xd;
  &quot;user&quot;: null,&#xd;
  &quot;files&quot;: [&#xd;
    {&#xd;
      &quot;filePath&quot;: null,&#xd;
      &quot;state&quot;: 1,&#xd;
      &quot;file&quot;: 1,&#xd;
      &quot;resolution&quot;: &quot;128x128&quot;,&#xd;
      &quot;source&quot;: {&#xd;
        &quot;uploadId&quot;: &quot;${thumb128-uploadId}&quot;,&#xd;
        &quot;copyFrom&quot;: null&#xd;
      },&#xd;
      &quot;version&quot;: null,&#xd;
      &quot;extension&quot;: 5&#xd;
    },&#xd;
    {&#xd;
      &quot;filePath&quot;: null,&#xd;
      &quot;state&quot;: 1,&#xd;
      &quot;file&quot;: 1,&#xd;
      &quot;resolution&quot;: &quot;256x256&quot;,&#xd;
      &quot;source&quot;: {&#xd;
        &quot;uploadId&quot;: &quot;${thumb256-uploadId}&quot;,&#xd;
        &quot;copyFrom&quot;: null&#xd;
      },&#xd;
      &quot;version&quot;: null,&#xd;
      &quot;extension&quot;: 5&#xd;
    },&#xd;
    {&#xd;
      &quot;filePath&quot;: null,&#xd;
      &quot;state&quot;: 1,&#xd;
      &quot;file&quot;: 1,&#xd;
      &quot;resolution&quot;: &quot;512x512&quot;,&#xd;
      &quot;source&quot;: {&#xd;
        &quot;uploadId&quot;: &quot;${thumb512-uploadId}&quot;,&#xd;
        &quot;copyFrom&quot;: null&#xd;
      },&#xd;
      &quot;version&quot;: null,&#xd;
      &quot;extension&quot;: 5&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${main-server}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/Character</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">${http.connectTimeout}</stringProp>
            <stringProp name="HTTPSampler.response_timeout">${http.responseTimeout}</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
